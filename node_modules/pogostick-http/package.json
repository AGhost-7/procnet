{
  "name": "pogostick-http",
  "version": "1.2.6",
  "description": "Implementation of the pogostick protocol for http.",
  "main": "index.js",
  "directories": {
    "test": "mocha"
  },
  "scripts": {
    "ci": "npm run lint && npm run test",
    "lint": "jshint .",
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AGhost-7/pogostick.git"
  },
  "contributors": [
    {
      "name": "Jonathan Boudreau",
      "email": "jonathan.boudreau.92@gmail.com"
    }
  ],
  "keywords": [
    "rpc",
    "http",
    "promise",
    "server",
    "client"
  ],
  "author": {
    "name": "Jonathan Boudreau"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/AGhost-7/pogostick/issues"
  },
  "homepage": "https://github.com/AGhost-7/pogostick#readme",
  "devDependencies": {
    "bluebird": "^2.9.34",
    "chai": "^3.2.0",
    "jshint": "^2.8.0",
    "mocha": "^2.3.0"
  },
  "dependencies": {
    "extend": "^3.0.0",
    "pogostick-proto": "^1.2.8"
  },
  "readme": "\n## Pogostick Http ![Build](https://travis-ci.org/AGhost-7/pogostick.svg?branch=master)\nThis is the implementation of the Pogostick protocol for http.\n\n## Introductory Example\n\n```javascript\n// Use whichever promise library you want, as long as it follows Promises/A+ \n// spec.\nvar Promise = require('bluebird');\nvar pogo = require('pogostick-http');\nvar mkServer = pogo.server({\n\thost: 'localhost'\t\n});\n\nvar server = mkServer({\n\tadd: function(a, b) {\n\t\treturn 1 + 2;\n\t},\n\t// You can also return promises and it will return only the result contained\n\t// within it. If the promise is rejected, it will also be rejected on the \n\t// client.\n\tdelayedGreet: function(name) {\n\t\treturn new Promise(function(resolve) {\n\t\t\tsetTimeout(function() { \n\t\t\t\tresolve('hello world!');\n\t\t\t}, 5000);\n\t\t});\n});\n\n// you need to pass to the client constructor a function which generates\n// promise instances.\nvar promiseFactory = function(resolver) { return new Promise(resolver); };\nvar mkClient = pogo.client(promiseFactory, { host: 'localhost' });\n\nserver.listen(3000, function() {\n\tmkClient({ port: 3000 }, function(err, remote) {\n\t\tPromise.all([\n\t\t\tremote.add(1, 2),\n\t\t\tremote.delayedGreet()\n\t\t]).spread(function(sum, greet) {\n\t\t\tconsole.log(sum, greet);\n\t\t});\n\t});\n});\n\n``` \n\n## Features\n\n### Deep Objects\nPogostick supports using objects as namespaces. It also supports arrays of \nfunctions.\n\n```javascript\n// Server\nvar server = mkServer({\n\tfoo: {\n\t\tbar: function() {\n\t\t\treturn \"foobar\";\n\t\t},\n\t\tbaz: function() {\n\t\t\treturn \"foobaz\";\n\t\t}\n\t}\n});\n// etc...\n\n// Client\nmkClient({ port: 3000 }, function(err, remote) {\n\tremote.foo.bar().then(function(res) {\n\t\tconsole.log('server says: ', res); // -> server says: foobar\n\t});\n});\n```\n\n### Pick-Your-Own Promises\nAs long as the library you choose follows the Promises/A+ specification, you\ncan use your favourite promises library. You just need to specify the factory\nfunction so that pogostick can instantiate the promises for you.\n\n```javascript\nvar Bluebird = require('bluebird');\nvar bluebirdMkClient = pogo.client(function(resolver) {\n\treturn new Bluebird(resolver);\n});\n\nvar Q = require('q');\nvar qMkClient = pogo.client(Q.Promise);\n\nvar when = require('when');\nvar whenMkClient = pogo.client(when.promise);\n```\n\n### Implicit Parameters\nImplicit parameters in Pogostick are inspired by Scala implicit parameters. \nThese were implemented to make it possible to pass authentication tokens and \nsuch into remote procedures without having to specify them every time. So,\nhere's an example:\n\nServer:\n```javascript\n...\nmkServer({\n\tgreet: function() {\n\t\t// You access the implicit values sent by the client through the \"this\"\n\t\t// keyword.\n\t\treturn \"hello \" + this.name + \"!\";\n\t}\n});\n...\n```\n\nClient:\n```javascript\nmkClient({ port: 3000 }, function(err, remote) {\n\tif(err) return console.log('there was an error loading the remote');\n\tvar withName = remote.$implicitly('name', 'AGhost-7');\n\t// Using withName, you will automatically send \"AGhost-7\" to the server.\n\twithName\n\t\t.greet()\n\t\t.then(console.log.bind(console));\n});\n```\n\nThe client in this case will print to the console `Hello AGhost-7`.\n\n\n\n\n## Module Types\n`promiseFactory` is a function which accepts a resolver function and returns\na promise. It is bundled in most promise libaries and can usually be easily\ncreated when it is not.\n\n```javascript\nvar fs = require('fs');\nvar Q = require('q');\nvar p = Q.promise(function(resolve, reject) {\n\tfs.readFile('/etc/dkms', function(err, buf) {\n\t\terr ? reject(err) : resolve(buf.toString());\n\t});\n});\np.then(console.log.bind(console));\n```\n\n\n## The Remote Object\nThe remote object contains all procedures that the server has listed, allowing\nyou to call the functions from the network. There are two additional methods\nwhich are added to the remote object.\n\n### `$end()`\nPrevents the procedures on the remote from sending any more requests to the \nserver. This is called internally in some cases.\n\n```javascript\n// returns a resolved promise if there was no error\nremote.foo(); \n// Close the remote\nremote.$end();\n// skips fetching to the server and will just return a rejected promise\nremote.foo();\n```\n\n## `$implicitly(key, value)`\nReturns a new remote instance which will send the data to the server each time\nyou call the procedures on it.\n\n\n\n## Client Events\n\n### `error`\nThe error event is triggered whenever the client receives and `err` message\nback from the server. Essentially, whenever the remote object returns a \nrejected promise.\n\nThis can be useful if you want to catch certain connection errors. For example,\nyou may want to give GUI feedback if you can't connect to the server because\nthere is no connection.\n\n### `exit`\nThis is a response that the server can send to the client to terminate any\nmore requests. This will cause the remote to stop sending requests, and simply\nreturn rejected promises every time.\n\n### `end`\nCalled at any time the remote is no longer capable of sending requests. For the\nhttp implementations, this is only the case when the server sends a `exit` \nresponse. For persistent connections such as TCP, the `end` event is triggered\nwhenever the connection is lost as well.\n\n\n## Module Functions\n\n### `client(promiseFactory)`\nReturns a client generating function that you can pass an options object and\na complete handler to.\n \nThe options are passed to the underlying native nodeJS [http][1] module, giving\nthe options such as `port` and `host`.\n\nYou also have access to the `on` option, which alows you to specify event \nhandlers.\n\n### `https.client(promiseFactory)`\nReturns a client generating function similar to `client(promiseFactory)`. Just\nlike `client(promiseFactory)`, the options are passed to the underlying native\nnodeJs module, this time [https][2]. There is also the `on` option, which list\nevents you can listen to.\n\n```javascript\nvar mkClient = pogo.client(promise);\nvar options = {\n\thost: 'localhost',\n\tport: 3000,\n\ton: {\n\t\tend: function() {\n\t\t\tconsole.log('Connection was ended');\n\t\t},\n\t\terror: function(err) {\n\t\t\tif(err.code === 'ECONNREFUSED') {\n\t\t\t\tconsole.log('could not connect to server!');\n\t\t\t}\n\t\t}\n\t}\n};\n\nmkClient(options, function(err, remote) {\n\t...\n});\n```\n\n### `server(options)`\nAccepts the default options and returns a server instantiation function. Each\nserver instance will inherit the inital options specified in the function.\n\nThe options are the following:\n- `headers` specifies which headers to send out in each request.\n\n### `https.server(options)`\nSimilar to `server(options` with two additional options.\n- `cert`, the ssl certificate.\n- `key`, which is the encryption key.\n\n### `exit([message])`\nThis tells the client that the server is no longer available. The client \nimplementation will stop its connection and the remotes will no longer send\nrequests, only returning rejected promises. Triggers the `end` and `exit` \nevent.\n\n```javascript\nvar pogo = require('pogostick-http');\n...\nmkServer({\n\tdivide: function(a, b) {\n\t\tif(b === 0) {\n\t\t\t// The `message` argument is optional.\n\t\t\treturn pogo.exit();\n\t\t} else {\n\t\t\treturn a / b;\n\t\t}\n\t}\n});\n...\n```\n\n[1]: https://nodejs.org/api/http.html#http_http_request_options_callback\n[2]: https://nodejs.org/api/https.html#https_https_request_options_callback\n",
  "readmeFilename": "readme.md",
  "_id": "pogostick-http@1.2.6",
  "_shasum": "85c4809e968251f05352741bc2ccd352ad56e9ee",
  "_from": "pogostick-http@>=1.2.0 <2.0.0"
}
